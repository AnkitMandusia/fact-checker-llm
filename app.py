# -*- coding: utf-8 -*-
"""app.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1bECvzSgAFTEnTshlbo58Uoj8qqZf2e_G
"""

import requests
import json
import gradio as gr
import speech_recognition as sr
from gtts import gTTS
import uuid
import os
from pydub import AudioSegment

# âœ… Google Gemini API Key (Set via Environment Variable)
API_KEY = os.getenv("GEMINI_API_KEY")
API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
headers = {"Content-Type": "application/json", "X-goog-api-key": API_KEY}

recognizer = sr.Recognizer()

def speech_to_text(audio_file):
    try:
        audio = AudioSegment.from_file(audio_file)
        audio = audio.set_channels(1).set_frame_rate(16000)
        temp_wav = f"temp_{uuid.uuid4().hex}.wav"
        audio.export(temp_wav, format="wav")
        with sr.AudioFile(temp_wav) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data)
        os.remove(temp_wav)
        return text
    except Exception as e:
        return f"Error: {str(e)}"

def generate_response(question):
    payload = {
        "contents": [{"parts": [{"text": f"Answer this question professionally: {question}"}]}]
    }
    try:
        response = requests.post(API_URL, headers=headers, data=json.dumps(payload), timeout=30)
        if response.status_code != 200:
            return f"API Error: {response.status_code} - {response.text}"
        result = response.json()
        return result["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        return f"Error: {str(e)}"

def text_to_speech(text):
    tts = gTTS(text=text, lang="en")
    file_path = f"response_{uuid.uuid4().hex}.mp3"
    tts.save(file_path)
    return file_path

def process_input(audio, text_input):
    if audio:
        question = speech_to_text(audio)
    else:
        question = text_input.strip()
    if not question:
        return "Please provide a question.", None
    response_text = generate_response(question)
    audio_response = text_to_speech(response_text)
    return response_text, audio_response

iface = gr.Interface(
    fn=process_input,
    inputs=[
        gr.Audio(type="filepath", label="Upload your question as an audio file"),
        gr.Textbox(label="Or type your question here", placeholder="E.g., What's your superpower?")
    ],
    outputs=[
        gr.Textbox(label="Chatbot Response"),
        gr.Audio(label="Voice Response")
    ],
    title="Voice Bot",
    description="Voice bot that answers, questions as I would, using Google Gemini API with text and voice support."
)

iface.launch()
